#!/home/jdh4/bin/fuzzy-env/bin/python

# post issues at https://github.com/jdh4/name2id
# or write to halverson@princeton.edu

import sys
sys.path.append("/home/jdh4/bin/panes")
import sponsor  # reuse from lft
import utils    # reuse from lft

import os
from datetime import datetime
from pathlib import Path
from socket import gethostname
import pandas as pd
from fuzzywuzzy import process

def print_help():
  print("")
  print("Given the full or partial name of an RC user, name2id will find the")
  print("corresponding NetID. Fuzzy string matching is used so severe misspellings")
  print("of the name still result in a match.")
  print("")
  print("Examples:")
  spacer = " " * 7
  print(f"{spacer}$ name2id anatolie spitkosky")
  print(f"{spacer}$ name2id debeneti")
  print(f"{spacer}$ name2id Red Maxel")
  print(f"{spacer}$ name2id irene -n 15  # show 15 best matches (7 is default)")
  print("")

def fix_lastname_first_comma(full_name):
  parts = full_name.split()
  if (parts[0].endswith(',')):
    return ' '.join(parts[1:] + [parts[0][:-1]])
  else:
    return full_name

def remove_middle_initial(full_name):
  parts = full_name.split()
  cnt = len(parts)
  if (cnt > 2):
    for i in range(1, cnt - 1):
      if (parts[i].endswith('.') and (len(parts[i]) == 2)) or len(parts[i]) == 1:
        _ = parts.pop(i)
      return ' '.join(parts)
  else:
    return full_name

def format_sponsor(s):
  # extract last name from sponsor (taken from dossier.py)
  if pd.isna(s): return ''
  names = list(filter(lambda x: x not in ['Jr.', 'II', 'III', 'IV'], s.split()))
  if len(names) == 2:
    if len(names[1]) > 1: return names[1]
    else: return s
  elif (len(names) > 2):
    idx = 0
    while (names[idx].endswith('.') and (idx < len(names) - 1)):
      idx += 1
    names = names[idx:]
    e = ''.join([str(int(name.endswith('.'))) for name in names])
    if '1' in e: return ' '.join(names[e.index('1') + 1:])
    else: return names[-1]
  else:
    return s

def print_dataframe(df_str, x, y):
  width = max([len(row) for row in df_str]) + 1
  print('')
  print(df_str[0])
  print(''.join(['='] * width))
  print('\n'.join(df_str[1:]))
  print(''.join(['='] * width))
  print(f" Top {x} of {y} entries{mtime}")
  print('')

def getent_passwd():
  global mtime
  mtime = ""
  flnm = "/home/jdh4/bin/cron/combined_getent.csv"
  if Path(flnm).is_file():
    frmt = " as of %-I:%M %p on %-m/%-d"
    mtime = datetime.fromtimestamp(os.stat(flnm).st_mtime).strftime(frmt)
    return pd.read_csv(flnm, header=0)
  else:
    print("Master file not found so running getent passwd locally ...")
    from subprocess import run
    try:
      output = run("getent passwd", capture_output=True, shell=True, timeout=5)
    except:
      print("getent passwd failed. Exiting ...")
      sys.exit(1)
    else:
      lines = output.stdout.decode("utf-8").split('\n')
      df = pd.DataFrame(lines, columns=['raw'])
      df = df.raw.str.split(':', expand=True)
      # crusley:*:117706:30014:Calvin Rusley,GEO,Tullis C. Onstott:/home/crusley:/sbin/nologin
      #pd.set_option("display.max_rows", None, "display.max_columns", None)
      df.columns = ['NETID', 'chr', 'uid', 'gid', 'name_sponsor', 'path1', 'path2']
      df = df.drop(columns=['chr', 'uid', 'gid', 'path1', 'path2'])
      df = df[pd.notna(df.name_sponsor) & df.name_sponsor.str.contains(',')]
      df['SPONSOR'] = df.name_sponsor.apply(lambda u: u.split(',')[-1])
      df['DEPT'] = df.name_sponsor.apply(lambda u: u.split(',')[-2] if u.count(',') > 1 else u)
      df['NAME'] = df.name_sponsor.apply(lambda u: ' '.join(u.split(',')[:-2]) if u.count(',') > 1 else u)
      #df.NAME = df.NAME.apply(fix_lastname_first_comma)
      return df[['NETID/EMAIL', 'NAME', 'DEPT', 'SPONSOR']]

if __name__ == "__main__":
  # check for help menu
  name = ' '.join(sys.argv[1:])
  num_show = 7  # default number of results
  if "-n " in name:
    items = name.split()
    num_show = items[items.index("-n") + 1]
    items.remove("-n")
    items.remove(num_show)
    num_show = int(num_show)
    name = " ".join(items)
  if (name == '' or ' -h' in ' ' + name or '--help' in name):
    print_help()
    sys.exit(0)

  # remove middle initial
  parts = name.split()
  if len(parts) == 3:
    if len(parts[1]) == 1 or (len(parts[1]) == 2 and parts[1].endswith('.')):
      name = parts[0] + ' ' + parts[2]

  # get entries
  cols = ['NETID/EMAIL', 'NAME', 'DEPT', 'SPONSOR', 'PROB']
  df = getent_passwd()

  num_entries = df.shape[0]

  # clean and merge
  df = df[pd.notnull(df.NAME)]  # bug fix on 9/7/2021 (is same needed for df.SPONSOR?)
  df['NO_MIDDLE'] = df.NAME.apply(remove_middle_initial)
  choices = list(df.NO_MIDDLE.values)
  matches = process.extract(name, choices, limit=num_show)
  matches_df = pd.DataFrame(matches, columns=['NO_MIDDLE', 'PROB'])
  matches_df['PROB'] = 0.01 * matches_df['PROB']
  df = pd.merge(df, matches_df, how='right', on='NO_MIDDLE')
  df = df.drop_duplicates() # needed for bill
  df['NETID/EMAIL'] = df.NETID.apply(lambda u: u + '@princeton.edu')

  from socket import gethostname
  host = utils.known_hosts[gethostname().lower()]
  if host != "adroit":
    df["SPONSOR"] = df.NETID.apply(lambda x: sponsor.sponsor_per_cluster(x, verbose=False)[host])
    df.SPONSOR = df.SPONSOR.apply(lambda x: sponsor.sponsor_full_name(x, verbose=False))
    df.SPONSOR = df.SPONSOR.apply(format_sponsor)
  else:
    cols.remove("SPONSOR")

  df.NAME = df.NAME.apply(remove_middle_initial)
  if df.empty:
    print('No results were found.')
  else:
    df = df[cols].sort_values(by='PROB', ascending=False)
    df_str = df.fillna('').to_string(index=False)
    print_dataframe(df_str.split('\n'), num_show, num_entries)
